root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
indent_style = space
trim_trailing_whitespace = true

[*.{json, yml}]
indent_size = 2

[*.{xml, targets, csproj, props}]
indent_size = 2

[*.{cshtml, cstxt}]
insert_final_newline = false

[*.{cs}]
indent_size = 4

dotnet_style_qualification_for_field                                     = false : suggestion
dotnet_style_qualification_for_property                                  = false : suggestion
dotnet_style_qualification_for_method                                    = false : suggestion
dotnet_style_qualification_for_event                                     = false : suggestion

dotnet_style_predefined_type_for_locals_parameters_members               = true : warning
dotnet_style_predefined_type_for_member_access                           = true : warning
dotnet_style_readonly_field                                              = true : suggestion

dotnet_style_require_accessibility_modifiers                             = always : warning
csharp_preferred_modifier_order                                          = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async : warning

dotnet_style_object_initializer                                          = true : suggestion
dotnet_style_collection_initializer                                      = true : suggestion
dotnet_style_explicit_tuple_names                                        = true : suggestion
dotnet_style_prefer_inferred_tuple_names                                 = true : suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names                 = true : suggestion
dotnet_style_prefer_auto_properties                                      = true : suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method         = true : suggestion
dotnet_style_prefer_conditional_expression_over_assignment               = true : silent
dotnet_style_prefer_conditional_expression_over_return                   = true : silent

dotnet_style_coalesce_expression                                         = true : warning
dotnet_style_null_propagation                                            = true : warning

csharp_style_var_for_built_in_types                                      = true : suggestion
csharp_style_var_when_type_is_apparent                                   = true : suggestion
csharp_style_var_elsewhere                                               = true : suggestion

csharp_style_expression_bodied_methods                                   = true
csharp_style_expression_bodied_operators                                 = true : suggestion
csharp_style_expression_bodied_properties                                = true : suggestion
csharp_style_expression_bodied_indexers                                  = true : suggestion
csharp_style_expression_bodied_accessors                                 = true : suggestion
csharp_style_expression_bodied_constructor                               = false : warning

csharp_style_pattern_matching_over_is_with_cast_check                    = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check                    = true : suggestion

csharp_style_inlined_variable_declaration                                = true : warning

csharp_prefer_simple_default_expression                                  = true : suggestion
csharp_style_deconstructed_variable_declaration                          = true : suggestion
csharp_style_pattern_local_over_anonymous_function                       = true : suggestion

csharp_style_throw_expression                                            = true : suggestion
csharp_style_conditional_delegate_call                                   = true : warning

csharp_prefer_braces                                                     = true : warning # I won't allow changing that :P

dotnet_sort_system_directives_first                                      = true
dotnet_separate_import_directive_groups                                  = false

csharp_new_line_before_open_brace                                        = all
csharp_new_line_before_else                                              = true
csharp_new_line_before_catch                                             = true
csharp_new_line_before_finally                                           = true
csharp_new_line_before_members_in_object_initializers                    = true
csharp_new_line_before_members_in_anonymous_types                        = true
csharp_new_line_between_query_expression_clauses                         = true

csharp_indent_case_contents                                              = true
csharp_indent_switch_labels                                              = true
csharp_indent_labels                                                     = one_less_than_current

csharp_space_after_cast                                                  = false
csharp_space_after_keywords_in_control_flow_statements                   = true
csharp_space_between_method_declaration_parameter_list_parentheses       = false
csharp_space_between_method_call_parameter_list_parentheses              = false
csharp_space_between_parentheses                                         = false
csharp_space_before_colon_in_inheritance_clause                          = true
csharp_space_after_colon_in_inheritance_clause                           = true
csharp_space_around_binary_operators                                     = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis            = false
csharp_space_between_method_call_empty_parameter_list_parentheses        = false
csharp_space_after_comma                                                 = true
csharp_space_after_dot                                                   = false

csharp_preserve_single_line_statements                                   = true
csharp_preserve_single_line_blocks                                       = true

###############################
# Naming Conventions: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions
###############################

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization               = pascal_case
dotnet_naming_style.camel_case_style.capitalization                = camel_case

dotnet_naming_style.I_prefix_style.required_prefix                 = I
dotnet_naming_style.I_prefix_style.capitalization                  = pascal_case

dotnet_naming_style.T_prefix_style.required_prefix                 = T
dotnet_naming_style.T_prefix_style.capitalization                  = pascal_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity  = warning
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols   = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style     = pascal_case_style
dotnet_naming_symbols.local_functions.applicable_kinds             = local_function

# Use PascalCase for constant locals
dotnet_naming_rule.constant_locals_should_be_pascal_case.severity  = warning
dotnet_naming_rule.constant_locals_should_be_pascal_case.symbols   = constant_locals
dotnet_naming_rule.constant_locals_should_be_pascal_case.style     = pascal_case_style
dotnet_naming_symbols.constant_locals.applicable_kinds             = local
dotnet_naming_symbols.constant_locals.applicable_accessibilities   = *
dotnet_naming_symbols.constant_locals.required_modifiers           = const

# Use PascalCase for constant fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity  = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols   = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style     = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds             = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities   = *
dotnet_naming_symbols.constant_fields.required_modifiers           = const

# Use PascalCase for static readonly fields
dotnet_naming_rule.pascal_case_for_static_ro_fields.severity       = warning
dotnet_naming_rule.pascal_case_for_static_ro_fields.symbols        = static_ro_fields
dotnet_naming_rule.pascal_case_for_static_ro_fields.style          = pascal_case_style
dotnet_naming_symbols.static_ro_fields.applicable_kinds            = field
dotnet_naming_symbols.static_ro_fields.applicable_accessibilities  = *
dotnet_naming_symbols.static_ro_fields.required_modifiers          = static,readonly

# Use PascalCase for public fields
dotnet_naming_rule.pascal_case_for_public_fields.severity          = warning
dotnet_naming_rule.pascal_case_for_public_fields.symbols           = public_fields
dotnet_naming_rule.pascal_case_for_public_fields.style             = pascal_case_style
dotnet_naming_symbols.public_fields.applicable_kinds               = field
dotnet_naming_symbols.public_fields.applicable_accessibilities     = public

# Interfaces must be PascalCase and have an I prefix
dotnet_naming_rule.interfaces_start_with_I.severity                = warning
dotnet_naming_rule.interfaces_start_with_I.symbols                 = any_interface
dotnet_naming_rule.interfaces_start_with_I.style                   = I_prefix_style
dotnet_naming_symbols.any_interface.applicable_accessibilities     = *
dotnet_naming_symbols.any_interface.applicable_kinds               = interface

# Type parameters must be PascalCase and have a T prefix
dotnet_naming_rule.type_parameters_start_with_T.severity           = warning
dotnet_naming_rule.type_parameters_start_with_T.symbols            = any_type_parameter
dotnet_naming_rule.type_parameters_start_with_T.style              = T_prefix_style
dotnet_naming_symbols.any_type_parameter.applicable_kinds          = type_parameter

# Classes, structs, methods, enums, events, properties, namespaces, delegates must be PascalCase
dotnet_naming_rule.general_naming.severity                         = warning
dotnet_naming_rule.general_naming.symbols                          = general
dotnet_naming_rule.general_naming.style                            = pascal_case_style
dotnet_naming_symbols.general.applicable_kinds                     = class,struct,enum,property,method,event,namespace,delegate
dotnet_naming_symbols.general.applicable_accessibilities           = *

# Everything else is camelCase
dotnet_naming_rule.everything_else_naming.severity                 = warning
dotnet_naming_rule.everything_else_naming.symbols                  = everything_else
dotnet_naming_rule.everything_else_naming.style                    = camel_case_style
dotnet_naming_symbols.everything_else.applicable_kinds             = *
dotnet_naming_symbols.everything_else.applicable_accessibilities   = *

dotnet_diagnostic.CA1812.severity = none
dotnet_diagnostic.CA1724.severity = none

[*PlateCBRProperties.cs]
dotnet_diagnostic.SA1300.severity = none
